버전 관리 시스템
	원하는 시점(버전)으로 이동할 수 있으며, 
	각 버전별로 여러 개발자가 협업할 수 있는 최적의 환경을 제공하는 시스템

SVN
	작업 내역 커밋 시 변경 사항과 히스토리가 즉시 서버로 전송되기 때문에 관리가 용이하다.
	또한 간단한 설치와 사용 방법으로 별도의 교육 없이 초보자도 쉽게 사용할 수 있다.
	하지만 항상 원격 저장소(SVN 서버)를 필요로 하며 서버 간 버전 관리가 힘들다.

Git(분산형 버전 관리 시스템)
	SVN이 가지고 있던 클라이언트와 서버 간의 버전 관리 문제를 많이 보완해준 시스템
	서버 뿐만 아니라 로컬에서도 버전 관리가 가능하며, 로컬이 서버가 될 수 있고,
	서버도 로컬이 될 수 있다. 브랜치라는 개념을 사용하여 마음대로 로컬 환경에서도
	커밋과 버전 관리가 가능하다.

Git-Hub(분산형 버전 관리 공유 서버)
	Git으로 관리하는 프로젝트를 호스팅 해주는 사이트 중 하나이다.
	로컬 저장소에서 작업하던 파일을 다른 클라이언트와 공유하기 위한 서버이다.
---------------------------------------------------------------------------------------
브랜치
	한 개의 처리 경로를 여러 개의 처리 경로로 나눌 때 사용한다.
	보통 동시에 버전 관리를 해야할 때 사용하며,
	기본 브랜치는 master(현재는 main)이고, 각각의 브랜치는 현재 버전에 대한 커밋을 가리키고 있다.

   1. 커밋3 상태에서 hds 브랜치 생성
   
                 	[master]
                   	↓
      커밋1----커밋2-----커밋3
                   	↑
                  	[hds]
              

   2. hds 브랜치에서 커밋4 진행
   
                     [master]
                   	 ↓
      커밋1----커밋2-----커밋3----커밋4
				↑
				[hds]
                     
   3. master 브랜치에서 커밋5 진행
   
                       	  	[master]
                         	    ↓
                   	  ┌------커밋5
      커밋1----커밋2-----커밋3
                   	  └------커밋4
                         	    ↑
                        	  [hds]   
                        
   4. [HEAD] 포인터의 역할
      브랜치 혹은 커밋을 가리키는 포인터이며, [HEAD]를 통해 현재 커밋 상태를 표시해준다.
      또한 최신 커밋이 아닌 과거 커밋으로도 이동할 수 있다.

                       		[master]
                         	↓
                  	┌------커밋5
      커밋1----커밋2-----커밋3
                   	└------커밋4
                         	↑
                        	[hds]
                        	[HEAD]
========================================================================================
Organization 생성 > Repository 생성 > Settings > Collaborators and teams > Add people
> 팀장 본인 계정 추가 > Role: Admin > 자격 관리 증명 삭제 > 터미널에서 push > 브라우저 로그인 선택

===============================================
1. organization 생성 (팀장)
	- organization 생성
	- organization-repository 생성
2. organization에서 포크 생성 전 (팀장)
	- git remote add repository명 깃헙코드주소
	- organization(master)에 커밋할 파일 추가
	- organization(master)에 파일 하나 커밋 및 푸시 완료
	- organization - settings > collaborators and teams에 people 추가
2. organization에서 포크 생성 (팀원)
3. 포크한 개인 레포를 로컬 저장소에 저장(팀원)
	- git remote add origin 포크한 개인레포 깃헙코드주소
	- git clone 깃헙주소
4. 작업할 브랜치 생성 및 작업 add, commit, push (팀원)
	- git checkout -b board/list // 작업할 브랜치 생성 및 이동
	- 작업 완료 시 커밋 이력 생김
	- git add 작업물
	- git commit -m "커밋내용"
	- git checkout master  // master 브랜치로 이동
	- git push origin master // master브랜치에서 push
5. 포크한 개인레포에서 pr(pull request) 작성 (팀원)
6. organization에서 pr의 conflict 확인 후 merge (팀장)
7. 개인 레포로 fork 업데이트 (팀원)
8. 개인 레포에서 pull(master) (팀원)
9. 작업할 브랜치랑 master브랜치랑 merge 후 작업 진행 (팀원)






















